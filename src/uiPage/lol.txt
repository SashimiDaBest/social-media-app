    private JPanel createMainPanel() {
        JPanel mainPanel = new JPanel(new GridLayout(4, 1, 10, 10));
        mainPanel.add(createAccountInfoPanel());
        mainPanel.add(createPeoplePanel(1, "Followers"));
        mainPanel.add(createPeoplePanel(2, "Following"));
        mainPanel.add(createPeoplePanel(3, "Blocked Users"));
        return mainPanel;
    }

    private JPanel createAccountInfoPanel() {
        JPanel accountInfoPanel = new JPanel(new GridBagLayout());
        accountInfoPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JLabel usernameLabel = new JLabel("Username:");
        JTextField usernameField = new JTextField(15);
        usernameField.setEditable(false);

        JLabel accountTypeLabel = new JLabel("Account Type:");
        JTextField accountTypeField = new JTextField(15);
        accountTypeField.setEditable(false);

        try {
            usernameField.setText(bufferedReader.readLine());
            accountTypeField.setText("1".equals(bufferedReader.readLine()) ? "Private" : "Public");
        } catch (IOException e) {
            showError("Failed to load account information: " + e.getMessage());
        }

        gbc.gridx = 0;
        gbc.gridy = 0;
        accountInfoPanel.add(usernameLabel, gbc);
        gbc.gridx = 1;
        accountInfoPanel.add(usernameField, gbc);
        gbc.gridx = 0;
        gbc.gridy = 1;
        accountInfoPanel.add(accountTypeLabel, gbc);
        gbc.gridx = 1;
        accountInfoPanel.add(accountTypeField, gbc);

        profileButton = new JButton("Edit Profile");
        settingButton = new JButton("Settings");

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        buttonPanel.add(profileButton);
        buttonPanel.add(settingButton);

        JPanel container = new JPanel(new BorderLayout());
        container.add(accountInfoPanel, BorderLayout.CENTER);
        container.add(buttonPanel, BorderLayout.SOUTH);
        return container;
    }

    private JPanel createPeoplePanel(int category, String label) {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createTitledBorder(label));

        JTextArea peopleTextArea = new JTextArea();
        peopleTextArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(peopleTextArea);
        panel.add(scrollPane, BorderLayout.CENTER);

        new Thread(() -> loadPeopleData(category, peopleTextArea)).start();
        return panel;
    }

    private void loadPeopleData(int category, JTextArea textArea) {
        try {
            String response = bufferedReader.readLine();
            SwingUtilities.invokeLater(() -> {
                if ("[EMPTY]".equals(response)) {
                    textArea.setText("No " + (category == 1 ? "followers." : category == 2 ? "following." : "blocked users."));
                } else {
                    textArea.setText(response.replace(";", "\n"));
                }
            });
        } catch (IOException e) {
            SwingUtilities.invokeLater(() -> showError("Failed to load data: " + e.getMessage()));
        }
    }

    private void setupActionListeners() {
        profileButton.addActionListener(e -> JOptionPane.showMessageDialog(this, "Profile editing is under development."));
        settingButton.addActionListener(e -> openSettingsDialog());
        backButton.addActionListener(e -> {
            UserPageClient.write("5", bufferedWriter);
            pageManager.lazyLoadPage("feed", () -> new FeedViewPage(pageManager, bufferedWriter, bufferedReader));
            pageManager.removePage("user");
        });
        nextButton.addActionListener(e -> JOptionPane.showMessageDialog(this, "Next functionality is under development."));
    }

    private void openSettingsDialog() {
        JPanel settingsPanel = new JPanel(new GridLayout(4, 2, 10, 10));
        JTextField usernameField = new JTextField(15);
        JPasswordField passwordField = new JPasswordField(15);
        JCheckBox changeAccountType = new JCheckBox("Make Account Private");
        JButton saveButton = new JButton("Save Changes");

        settingsPanel.add(new JLabel("Username:"));
        settingsPanel.add(usernameField);
        settingsPanel.add(new JLabel("Password:"));
        settingsPanel.add(passwordField);
        settingsPanel.add(changeAccountType);
        settingsPanel.add(saveButton);

        saveButton.addActionListener(e -> {
            UserPageClient.write("updateAccount", bufferedWriter);
            UserPageClient.write(usernameField.getText(), bufferedWriter);
            UserPageClient.write(new String(passwordField.getPassword()), bufferedWriter);
            UserPageClient.write(changeAccountType.isSelected() ? "1" : "0", bufferedWriter);
            JOptionPane.showMessageDialog(this, "Settings updated successfully!");
        });

        JOptionPane.showMessageDialog(this, settingsPanel, "Settings", JOptionPane.PLAIN_MESSAGE);
    }

    private void showError(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }
